(setq tabla '())
(setq listaslova '((1 A) (2 B) (3 C) (4 D) (5 E) (6 F) (7 G) (8 H) (9 I) (10 J)))
(defun napravi(dim)
    (if (>= dim 0) (napraviPoljeSaElementima dim (napravi (- dim 1)) tabla))
)
(defun napraviPoljeSaElementima(n tabla &optional(napravi))
    (cond 
        ((/= n 0) (append tabla (list (append (slovo n listaslova) (list (reverse (napraviPolje n)))))))
    )
)
(defun napraviPolje(n &optional(lista)(brojac dimenzije))
    (if (>= brojac 1) (napraviPolje n (append lista (list (append (list brojac) (list (poljePopuna1 n brojac))))) (- brojac 1)) lista)
)

(defun poljePopuna2(i j)
    (if (eq (mod j 2) 0) 
        (if (eq (mod i 2) 0) 
            (if (= i dimenzije) (reverse '(- - - - - - - - -)) (reverse '(X - - - - - - - -))) 
        )
    '(" " " " " " " " " " " " " " " " " ")
    )
)

(defun poljePopuna1(i j) 
    (if (eq (mod i 2) 1) (if (eq (mod j 2) 1) (if (= i 1) (reverse '(- - - - - - - - -)) (reverse '(O - - - - - - - -))) '(" " " " " " " " " " " " " " " " " "))
     (poljePopuna2 i j)
    )
)
(defstruct struktura
    tabla
    dimenzije
)
(defun generisiInterfejs()
    (unosdimenzija)
    (setq moja-struktura (make-struktura :tabla (napravi dimenzije) :dimenzije dimenzije))
            (format t "~%       ") (crtajBrojeve (struktura-dimenzije moja-struktura))
            (crtajInterfejs (struktura-tabla moja-struktura) dimenzije)
            (if (y-or-n-p "Da li zelite da igrate prvi? ") (potez (read) (read) (read) (read) (read) (struktura-tabla moja-struktura)))
            (format t "~%       ") (crtajBrojeve (struktura-dimenzije moja-struktura))
            ;; (crtajInterfejs (struktura-tabla moja-struktura) (struktura-dimenzije moja-struktura))
)
(defun potez (slovo1 broj1 slovo2 broj2 visina tabla)
    (setq moja-struktura (make-struktura :tabla (potezcovek slovo1 broj1 visina tabla) :dimenzije dimenzije))
    ;; (setq moja-struktura (make-struktura :tabla (potezcovek1 slovo2 broj2 visina (struktura-tabla moja-struktura)) :dimenzije dimenzije))
    (setq moja-struktura (make-struktura :tabla (struktura-tabla moja-struktura)  :dimenzije dimenzije))
    (format t "~%       ") (crtajBrojeve (struktura-dimenzije moja-struktura))

    (crtajInterfejs (potezcovek1 slovo2 broj2 visina (struktura-tabla moja-struktura)) (struktura-dimenzije moja-struktura))
    (potez (read) (read) (read) (read) (read) (struktura-tabla moja-struktura))
)
(defun potezcovek(slovo broj visina tabla &optional(novatabla))
    (if (not (eq tabla nil)) (if (not (eq (caar tabla) slovo)) (potezcovek slovo broj visina (cdr tabla) (append novatabla (list (car tabla)))) (append (append novatabla (list (append (list (caar tabla)) (list (nadjiPolje (car (cdr (car tabla))) broj tabla visina))))) (cdr tabla))))
)
(defun potezcovek1(slovo broj visina tabla &optional(novatabla))
    (if (not (eq tabla nil)) (if (not (eq (caar tabla) slovo)) (potezcovek1 slovo broj visina (cdr tabla) (append novatabla (list (car tabla)))) (append (append novatabla (list (append (list (caar tabla)) (list (nadjiPolje1 (car (cdr (car tabla))) broj tabla visina))))) (cdr tabla))))
)
(defun nadjiPolje(listapolja broj tabla visina &optional(novalistapolja))
    (if (not (eq listapolja nil)) (if (not (eq (caar listapolja) broj)) (nadjiPolje (cdr listapolja) broj tabla visina (append novalistapolja (list (car listapolja)))) (append (append novalistapolja  (list (append (list (caar listapolja)) (list (obradipolje (cdr (car listapolja)) broj visina tabla))))) (cdr listapolja))))
)
(defun nadjiPolje1(listapolja broj tabla visina &optional(novalistapolja))
    (if (not (eq listapolja nil)) (if (not (eq (caar listapolja) broj)) (nadjiPolje1 (cdr listapolja) broj tabla visina (append novalistapolja (list (car listapolja)))) (append (append novalistapolja  (list (append (list (caar listapolja)) (list (obradipolje1 (cdr (car listapolja)) broj visina tabla))))) (cdr listapolja))))
)
(defun obradipolje(polje broj visina tabla)
    (fja (reverse (car polje)) visina)
)
(defstruct pompolje
    lista 
)
(defun obradipolje1(polje broj visina tabla)
    (print (pompolje-lista pom))
    ;; (fj (pompolje-lista pom))
    (fja1 (reverse (car polje)) (fj (pompolje-lista pom)) visina)
)
(defun fja(polje visina &optional(ls)(ls1))
    (if (not (eq (car polje) '-)) (if (not (eq visina -1)) (f (fja (append (cdr polje) (list '-)) (- visina 1) (append ls (list (car polje))) (setq pom (make-pompolje :lista polje))))  ls) polje)
)
(defun f(polje &optional(n (length polje))(ls '()))
    (if (not (eq n 9)) (f polje (+ n 1) (append ls (list '-))) (append ls polje))
)
(defun fja1(polje poljezaumetanje visina &optional(ls '()))
    (if (eq (car polje) '-) (f (append poljezaumetanje (reverse ls))) (fja1 (cdr polje) poljezaumetanje visina (append ls (list (car polje)))))
)

(defun fj(polje &optional(ls '()))
    (if
        (not (eq (car polje) '-)) (fj (cdr polje) (append ls (list (car polje)))) ls
    )
) 
(defun insert (insertion border list)
    (cond
        ((null list) '())    
        ((equal border (car list))(append (list insertion border) (insert  insertion border (cdr list)) ))        
        ((listp (car list))
            (cons (insert insertion border (car list))(insert insertion border (cdr list) ))
        )  
        (t (cons (car list)(insert insertion border (cdr list))))
    )
)
(defun removeAt (temp index list) 
    (cond
        ((null list) '())
        ((equalp temp index)(removeAt (1+ temp) index (cdr list)) )
        ((listp (car list)) (cons (removeAt 0 index (car list)) (removeAt (1+ temp) index (cdr list)) ) )
        (t (cons (car list) (removeAt (1+ temp) index (cdr list) )))
    )
)
(defun obradipodpolje(podpolje broj tabla)
    (if (eq (car podpolje) '-) (obradipodpolje (cdr podpolje) broj tabla) (cons novopodpolje 'O))
)    
(defun vratiutabelu(slovo broj tabla)

)

(defun crtajBrojeve(dimenzije &optional(br 1))
    (cond 
        ((>= dimenzije 1) (format t " ~a            " br) (crtajBrojeve (- dimenzije 1) (+ br 1)))
    )
)

(defun crtajInterfejs(tabla dimenzije)
    (cond 
        ((not (eq tabla nil)) (crtajVrstu (car tabla) dimenzije) (crtajInterfejs (cdr tabla) dimenzije))
    )
)
(defun crtajVrstu(vrsta dimenzije)
    (cond 
        ((not (eq vrsta nil)) (format t "~% ~%     ")(crtajRed1 (car (cdr vrsta)) dimenzije) (format t "~% ~a   "(car vrsta)) (crtajRed2 (car (cdr vrsta)) dimenzije) (format t "~%     ")(crtajRed3 (car (cdr vrsta)) dimenzije))
    )
)
(defun crtajRed1(vr dimenzije)
    (cond 
        ((not (eq vr '())) (format t "~a       " (crtajPolje1 (car (cdr (car vr))))) (crtajRed1 (cdr vr) dimenzije))
    )
)
(defun crtajRed2(vr dimenzije)
    (cond 
        ((not (eq vr '())) (format t "~a       " (crtajPolje2  (cdr (cdr (cdr (car (cdr (car vr)))))))) (crtajRed2 (cdr vr) dimenzije))
    )
)
(defun crtajRed3(vr dimenzije)
    (cond 
        ((not (eq vr '())) (format t "~a       " (crtajPolje3 (cdr (cdr (cdr (cdr (cdr (cdr (car (cdr (car vr))))))))))) (crtajRed3 (cdr vr) dimenzije))
    )
)
(defun crtajPolje1(polje)
    (if (eq (length polje) 9) (append (append (list (car polje)) (list (car (cdr polje)))) (list (car (cdr (cdr polje))))) (print "  "))
)
(defun crtajPolje2(polje)
    (if (eq (length polje) 6) (append (append (list (car polje)) (list (car (cdr polje)))) (list (car (cdr (cdr polje))))) (print "  "))
)
(defun crtajPolje3(polje)
    (if (eq (length polje) 3) polje (print "  "))
)

(defun unosdimenzija ()
(format t "Unesite dimenziju: ~%")
(setq dimenzije (read))
    (if (not (= dimenzije 8)) (if (not (= dimenzije 10)) (unosdimenzija) (format t "validne dimenzije!")) (format t "validne dimenzije!")))
    

(defun slovo(n lista &optional(m 1))
    (if (not (= n m)) (slovo n (cdr lista) (+ m 1)) (cdr (car lista)))
)

(generisiInterfejs)